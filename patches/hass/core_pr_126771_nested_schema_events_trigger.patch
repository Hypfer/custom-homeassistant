From 323f9fa0f4b9d11ff1a6f1f18fae9b84c79d4d22 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=B6ren=20Beye?= <github@hypfer.de>
Date: Wed, 25 Sep 2024 19:40:56 +0200
Subject: [PATCH 1/2] Allow nested schema validation in event automation
 trigger

---
 .../homeassistant/triggers/event.py           | 24 ++++++----
 .../homeassistant/triggers/test_event.py      | 45 +++++++++++++++++++
 2 files changed, 61 insertions(+), 8 deletions(-)

diff --git a/homeassistant/components/homeassistant/triggers/event.py b/homeassistant/components/homeassistant/triggers/event.py
index 985e4819b2473..b63bc7b267594 100644
--- a/homeassistant/components/homeassistant/triggers/event.py
+++ b/homeassistant/components/homeassistant/triggers/event.py
@@ -75,15 +75,23 @@ async def async_attach_trigger(
         event_data.update(
             template.render_complex(config[CONF_EVENT_DATA], variables, limited=True)
         )
-        # Build the schema or a an items view if the schema is simple
-        # and does not contain sub-dicts. We explicitly do not check for
-        # list like the context data below since lists are a special case
-        # only for context data. (see test test_event_data_with_list)
+
+        def build_schema(data: dict[str, Any]) -> vol.Schema:
+            schema = {}
+            for key, value in data.items():
+                if isinstance(value, dict):
+                    schema[vol.Required(key)] = build_schema(value)
+                else:
+                    schema[vol.Required(key)] = value
+            return vol.Schema(schema, extra=vol.ALLOW_EXTRA)
+
+        # For performance reasons, we want to avoid using a voluptuous schema here unless required
+        # Thus, if possible, we try to use a simple items comparison
+        # For that, we explicitly do not check for list like the context data below since lists are
+        # a special case only used for context data. (see test test_event_data_with_list)
+        # Otherwise, we recursively build the schema (see test test_event_data_with_list_nested)
         if any(isinstance(value, dict) for value in event_data.values()):
-            event_data_schema = vol.Schema(
-                {vol.Required(key): value for key, value in event_data.items()},
-                extra=vol.ALLOW_EXTRA,
-            )
+            event_data_schema = build_schema(event_data)
         else:
             # Use a simple items comparison if possible
             event_data_items = event_data.items()
From aaed06c1010147cb9b1c36a1333a16439df231ee Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=B6ren=20Beye?= <github@hypfer.de>
Date: Wed, 25 Sep 2024 22:24:45 +0200
Subject: [PATCH 2/2] Fix rfxtrx device trigger

---
 homeassistant/components/rfxtrx/device_trigger.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/homeassistant/components/rfxtrx/device_trigger.py b/homeassistant/components/rfxtrx/device_trigger.py
index 35c1944948b33..fe9e0da0d527f 100644
--- a/homeassistant/components/rfxtrx/device_trigger.py
+++ b/homeassistant/components/rfxtrx/device_trigger.py
@@ -97,7 +97,7 @@ async def async_attach_trigger(
     if config[CONF_TYPE] == CONF_TYPE_COMMAND:
         event_data["values"] = {"Command": config[CONF_SUBTYPE]}
     elif config[CONF_TYPE] == CONF_TYPE_STATUS:
-        event_data["values"] = {"Status": config[CONF_SUBTYPE]}
+        event_data["values"] = {"Sensor Status": config[CONF_SUBTYPE]}

     event_config = event_trigger.TRIGGER_SCHEMA(
         {
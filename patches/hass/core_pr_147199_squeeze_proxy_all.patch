From 07a78cf6f7af61a55c88dccfff2d0b479f43a09e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=B6ren=20Beye?= <github@hypfer.de>
Date: Sat, 27 Sep 2025 14:39:15 +0200
Subject: [PATCH] Squeezebox: Proxy all the thumbnails (#147199)

Co-authored-by: Erik Montnemery <erik@montnemery.com>
---
 .../components/squeezebox/browse_media.py     | 37 +++++++++++--------
 .../components/squeezebox/media_player.py     | 36 +++++++++++++++---
 .../squeezebox/test_media_browser.py          | 32 ++++++++++++++++
 3 files changed, 84 insertions(+), 21 deletions(-)

diff --git a/homeassistant/components/squeezebox/browse_media.py b/homeassistant/components/squeezebox/browse_media.py
index 436308a8920d6..2ca9d6f058c9d 100644
--- a/homeassistant/components/squeezebox/browse_media.py
+++ b/homeassistant/components/squeezebox/browse_media.py
@@ -5,7 +5,7 @@
 import contextlib
 from dataclasses import dataclass, field
 import logging
-from typing import Any
+from typing import TYPE_CHECKING, Any, cast

 from pysqueezebox import Player

@@ -14,7 +14,6 @@
     BrowseError,
     BrowseMedia,
     MediaClass,
-    MediaPlayerEntity,
     MediaType,
 )
 from homeassistant.core import HomeAssistant
@@ -22,6 +21,9 @@

 from .const import DOMAIN, UNPLAYABLE_TYPES

+if TYPE_CHECKING:
+    from .media_player import SqueezeBoxMediaPlayerEntity
+
 _LOGGER = logging.getLogger(__name__)

 LIBRARY = [
@@ -244,14 +246,13 @@ def _build_response_favorites(item: dict[str, Any]) -> BrowseMedia:
 def _get_item_thumbnail(
     item: dict[str, Any],
     player: Player,
-    entity: MediaPlayerEntity,
+    entity: SqueezeBoxMediaPlayerEntity,
     item_type: str | MediaType | None,
     search_type: str,
     internal_request: bool,
     known_apps_radios: set[str],
 ) -> str | None:
     """Construct path to thumbnail image."""
-    item_thumbnail: str | None = None

     track_id = item.get("artwork_track_id") or (
         item.get("id")
@@ -262,21 +263,27 @@ def _get_item_thumbnail(

     if track_id:
         if internal_request:
-            item_thumbnail = player.generate_image_url_from_track_id(track_id)
-        elif item_type is not None:
-            item_thumbnail = entity.get_browse_image_url(
-                item_type, item["id"], track_id
-            )
+            return cast(str, player.generate_image_url_from_track_id(track_id))
+        if item_type is not None:
+            return entity.get_browse_image_url(item_type, item["id"], track_id)
+
+    url = None
+    content_type = item_type or "unknown"
+
+    if search_type in ["apps", "radios"]:
+        url = cast(str, player.generate_image_url(item["icon"]))
+    elif image_url := item.get("image_url"):
+        url = image_url
+
+    if internal_request or not url:
+        return url

-    elif search_type in ["apps", "radios"]:
-        item_thumbnail = player.generate_image_url(item["icon"])
-    if item_thumbnail is None:
-        item_thumbnail = item.get("image_url")  # will not be proxied by HA
-    return item_thumbnail
+    synthetic_id = entity.get_synthetic_id_and_cache_url(url)
+    return entity.get_browse_image_url(content_type, "synthetic", synthetic_id)


 async def build_item_response(
-    entity: MediaPlayerEntity,
+    entity: SqueezeBoxMediaPlayerEntity,
     player: Player,
     payload: dict[str, str | None],
     browse_limit: int,
diff --git a/homeassistant/components/squeezebox/media_player.py b/homeassistant/components/squeezebox/media_player.py
index d1313eccc37bd..0b9b54a1dcddb 100644
--- a/homeassistant/components/squeezebox/media_player.py
+++ b/homeassistant/components/squeezebox/media_player.py
@@ -8,6 +8,7 @@
 import logging
 from typing import TYPE_CHECKING, Any, cast

+from lru import LRU
 from pysqueezebox import Server, async_discover
 import voluptuous as vol

@@ -43,6 +44,7 @@
 from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback
 from homeassistant.helpers.start import async_at_start
 from homeassistant.util.dt import utcnow
+from homeassistant.util.ulid import ulid_now

 from . import SQUEEZEBOX_HASS_DATA
 from .browse_media import (
@@ -260,6 +262,7 @@ def __init__(self, coordinator: SqueezeBoxPlayerUpdateCoordinator) -> None:
         self._previous_media_position = 0
         self._attr_unique_id = format_mac(self._player.player_id)
         self._browse_data = BrowseData()
+        self._synthetic_media_browser_thumbnail_items: LRU[str, str] = LRU(5000)

     @callback
     def _handle_coordinator_update(self) -> None:
@@ -742,6 +745,17 @@ async def async_unjoin_player(self) -> None:
         await self._player.async_unsync()
         await self.coordinator.async_refresh()

+    def get_synthetic_id_and_cache_url(self, url: str) -> str:
+        """Cache a thumbnail URL and return a synthetic ID.
+
+        This enables us to proxy thumbnails for apps and favorites, as those do not have IDs.
+        """
+        synthetic_id = f"s_{ulid_now()}"
+
+        self._synthetic_media_browser_thumbnail_items[synthetic_id] = url
+
+        return synthetic_id
+
     async def async_browse_media(
         self,
         media_content_type: MediaType | str | None = None,
@@ -785,11 +799,21 @@ async def async_get_browse_image(
         media_image_id: str | None = None,
     ) -> tuple[bytes | None, str | None]:
         """Get album art from Squeezebox server."""
-        if media_image_id:
+        if not media_image_id:
+            return (None, None)
+
+        if media_content_id == "synthetic":
+            image_url = self._synthetic_media_browser_thumbnail_items.get(
+                media_image_id
+            )
+
+            if image_url is None:
+                _LOGGER.debug("Synthetic ID %s not found in cache", media_image_id)
+                return (None, None)
+        else:
             image_url = self._player.generate_image_url_from_track_id(media_image_id)
-            result = await self._async_fetch_image(image_url)
-            if result == (None, None):
-                _LOGGER.debug("Error retrieving proxied album art from %s", image_url)
-            return result

-        return (None, None)
+        result = await self._async_fetch_image(image_url)
+        if result == (None, None):
+            _LOGGER.debug("Error retrieving proxied album art from %s", image_url)
+        return result
